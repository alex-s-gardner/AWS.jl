# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: entityresolution
using AWS.Compat
using AWS.UUIDs

"""
    create_matching_workflow(input_source_config, output_source_config, resolution_techniques, role_arn, workflow_name)
    create_matching_workflow(input_source_config, output_source_config, resolution_techniques, role_arn, workflow_name, params::Dict{String,<:Any})

Creates a MatchingWorkflow object which stores the configuration of the data processing job
to be run. It is important to note that there should not be a pre-existing MatchingWorkflow
with the same name. To modify an existing workflow, utilize the UpdateMatchingWorkflow API.

# Arguments
- `input_source_config`: A list of InputSource objects, which have the fields
  InputSourceARN and SchemaName.
- `output_source_config`: A list of OutputSource objects, each of which contains fields
  OutputS3Path, ApplyNormalization, and Output.
- `resolution_techniques`: An object which defines the resolutionType and the
  ruleBasedProperties
- `role_arn`: The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes
  this role to create resources on your behalf as part of workflow execution.
- `workflow_name`: The name of the workflow. There cannot be multiple
  DataIntegrationWorkflows with the same name.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: A description of the workflow.
- `"incrementalRunConfig"`: An object which defines an incremental run type and has only
  incrementalRunType as a field.
- `"tags"`: The tags used to organize, track, or control access for this resource.
"""
function create_matching_workflow(
    inputSourceConfig,
    outputSourceConfig,
    resolutionTechniques,
    roleArn,
    workflowName;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return entityresolution(
        "POST",
        "/matchingworkflows",
        Dict{String,Any}(
            "inputSourceConfig" => inputSourceConfig,
            "outputSourceConfig" => outputSourceConfig,
            "resolutionTechniques" => resolutionTechniques,
            "roleArn" => roleArn,
            "workflowName" => workflowName,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_matching_workflow(
    inputSourceConfig,
    outputSourceConfig,
    resolutionTechniques,
    roleArn,
    workflowName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return entityresolution(
        "POST",
        "/matchingworkflows",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "inputSourceConfig" => inputSourceConfig,
                    "outputSourceConfig" => outputSourceConfig,
                    "resolutionTechniques" => resolutionTechniques,
                    "roleArn" => roleArn,
                    "workflowName" => workflowName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_schema_mapping(schema_name)
    create_schema_mapping(schema_name, params::Dict{String,<:Any})

Creates a schema mapping, which defines the schema of the input customer records table. The
SchemaMapping also provides Entity Resolution with some metadata about the table, such as
the attribute types of the columns and which columns to match on.

# Arguments
- `schema_name`: The name of the schema. There cannot be multiple SchemaMappings with the
  same name.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: A description of the schema.
- `"mappedInputFields"`: A list of MappedInputFields. Each MappedInputField corresponds to
  a column the source data table, and contains column name plus additional information that
  Entity Resolution uses for matching.
- `"tags"`: The tags used to organize, track, or control access for this resource.
"""
function create_schema_mapping(
    schemaName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return entityresolution(
        "POST",
        "/schemas",
        Dict{String,Any}("schemaName" => schemaName);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_schema_mapping(
    schemaName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return entityresolution(
        "POST",
        "/schemas",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("schemaName" => schemaName), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_matching_workflow(workflow_name)
    delete_matching_workflow(workflow_name, params::Dict{String,<:Any})

Deletes the MatchingWorkflow with a given name. This operation will succeed even if a
workflow with the given name does not exist.

# Arguments
- `workflow_name`: The name of the workflow to be retrieved.

"""
function delete_matching_workflow(
    workflowName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return entityresolution(
        "DELETE",
        "/matchingworkflows/$(workflowName)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_matching_workflow(
    workflowName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return entityresolution(
        "DELETE",
        "/matchingworkflows/$(workflowName)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_schema_mapping(schema_name)
    delete_schema_mapping(schema_name, params::Dict{String,<:Any})

Deletes the SchemaMapping with a given name. This operation will succeed even if a schema
with the given name does not exist. This operation will fail if there is a
DataIntegrationWorkflow object that references the SchemaMapping in the workflow's
InputSourceConfig.

# Arguments
- `schema_name`: The name of the schema to delete.

"""
function delete_schema_mapping(
    schemaName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return entityresolution(
        "DELETE",
        "/schemas/$(schemaName)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_schema_mapping(
    schemaName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return entityresolution(
        "DELETE",
        "/schemas/$(schemaName)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_match_id(record, workflow_name)
    get_match_id(record, workflow_name, params::Dict{String,<:Any})

Returns the corresponding Match ID of a customer record if the record has been processed.

# Arguments
- `record`: The record to fetch the Match ID for.
- `workflow_name`: The name of the workflow.

"""
function get_match_id(
    record, workflowName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return entityresolution(
        "POST",
        "/matchingworkflows/$(workflowName)/matches",
        Dict{String,Any}("record" => record);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_match_id(
    record,
    workflowName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return entityresolution(
        "POST",
        "/matchingworkflows/$(workflowName)/matches",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("record" => record), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_matching_job(job_id, workflow_name)
    get_matching_job(job_id, workflow_name, params::Dict{String,<:Any})

Gets the status, metrics, and errors (if there are any) that are associated with a job.

# Arguments
- `job_id`: The ID of the job.
- `workflow_name`: The name of the workflow.

"""
function get_matching_job(
    jobId, workflowName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return entityresolution(
        "GET",
        "/matchingworkflows/$(workflowName)/jobs/$(jobId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_matching_job(
    jobId,
    workflowName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return entityresolution(
        "GET",
        "/matchingworkflows/$(workflowName)/jobs/$(jobId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_matching_workflow(workflow_name)
    get_matching_workflow(workflow_name, params::Dict{String,<:Any})

Returns the MatchingWorkflow with a given name, if it exists.

# Arguments
- `workflow_name`: The name of the workflow.

"""
function get_matching_workflow(
    workflowName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return entityresolution(
        "GET",
        "/matchingworkflows/$(workflowName)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_matching_workflow(
    workflowName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return entityresolution(
        "GET",
        "/matchingworkflows/$(workflowName)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_schema_mapping(schema_name)
    get_schema_mapping(schema_name, params::Dict{String,<:Any})

Returns the SchemaMapping of a given name.

# Arguments
- `schema_name`: The name of the schema to be retrieved.

"""
function get_schema_mapping(schemaName; aws_config::AbstractAWSConfig=global_aws_config())
    return entityresolution(
        "GET",
        "/schemas/$(schemaName)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_schema_mapping(
    schemaName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return entityresolution(
        "GET",
        "/schemas/$(schemaName)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_matching_jobs(workflow_name)
    list_matching_jobs(workflow_name, params::Dict{String,<:Any})

Lists all jobs for a given workflow.

# Arguments
- `workflow_name`: The name of the workflow to be retrieved.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of objects returned per page.
- `"nextToken"`: The pagination token from the previous ListSchemaMappings API call.
"""
function list_matching_jobs(workflowName; aws_config::AbstractAWSConfig=global_aws_config())
    return entityresolution(
        "GET",
        "/matchingworkflows/$(workflowName)/jobs";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_matching_jobs(
    workflowName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return entityresolution(
        "GET",
        "/matchingworkflows/$(workflowName)/jobs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_matching_workflows()
    list_matching_workflows(params::Dict{String,<:Any})

Returns a list of all the MatchingWorkflows that have been created for an AWS account.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of objects returned per page.
- `"nextToken"`: The pagination token from the previous ListSchemaMappings API call.
"""
function list_matching_workflows(; aws_config::AbstractAWSConfig=global_aws_config())
    return entityresolution(
        "GET", "/matchingworkflows"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_matching_workflows(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return entityresolution(
        "GET",
        "/matchingworkflows",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_schema_mappings()
    list_schema_mappings(params::Dict{String,<:Any})

Returns a list of all the SchemaMappings that have been created for an AWS account.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of objects returned per page.
- `"nextToken"`: The pagination token from the previous ListSchemaMappings API call.
"""
function list_schema_mappings(; aws_config::AbstractAWSConfig=global_aws_config())
    return entityresolution(
        "GET", "/schemas"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_schema_mappings(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return entityresolution(
        "GET", "/schemas", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Displays the tags associated with an AWS Entity Resolution resource. In Entity Resolution,
SchemaMapping, and MatchingWorkflow can be tagged.

# Arguments
- `resource_arn`: The ARN of the resource for which you want to view tags.

"""
function list_tags_for_resource(
    resourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return entityresolution(
        "GET",
        "/tags/$(resourceArn)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_tags_for_resource(
    resourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return entityresolution(
        "GET",
        "/tags/$(resourceArn)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_matching_job(workflow_name)
    start_matching_job(workflow_name, params::Dict{String,<:Any})

Starts the MatchingJob of a workflow. The workflow must have previously been created using
the CreateMatchingWorkflow endpoint.

# Arguments
- `workflow_name`: The name of the matching job to be retrieved.

"""
function start_matching_job(workflowName; aws_config::AbstractAWSConfig=global_aws_config())
    return entityresolution(
        "POST",
        "/matchingworkflows/$(workflowName)/jobs";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_matching_job(
    workflowName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return entityresolution(
        "POST",
        "/matchingworkflows/$(workflowName)/jobs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Assigns one or more tags (key-value pairs) to the specified AWS Entity Resolution resource.
Tags can help you organize and categorize your resources. You can also use them to scope
user permissions by granting a user permission to access or change only resources with
certain tag values. In Entity Resolution, SchemaMapping, and MatchingWorkflow can be
tagged. Tags don't have any semantic meaning to AWS and are interpreted strictly as strings
of characters. You can use the TagResource action with a resource that already has tags. If
you specify a new tag key, this tag is appended to the list of tags associated with the
resource. If you specify a tag key that is already associated with the resource, the new
tag value that you specify replaces the previous value for that tag.

# Arguments
- `resource_arn`: The ARN of the resource for which you want to view tags.
- `tags`: The tags used to organize, track, or control access for this resource.

"""
function tag_resource(resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config())
    return entityresolution(
        "POST",
        "/tags/$(resourceArn)",
        Dict{String,Any}("tags" => tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function tag_resource(
    resourceArn,
    tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return entityresolution(
        "POST",
        "/tags/$(resourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tags" => tags), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Removes one or more tags from the specified AWS Entity Resolution resource. In Entity
Resolution, SchemaMapping, and MatchingWorkflow can be tagged.

# Arguments
- `resource_arn`: The ARN of the resource for which you want to untag.
- `tag_keys`: The list of tag keys to remove from the resource.

"""
function untag_resource(
    resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config()
)
    return entityresolution(
        "DELETE",
        "/tags/$(resourceArn)",
        Dict{String,Any}("tagKeys" => tagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function untag_resource(
    resourceArn,
    tagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return entityresolution(
        "DELETE",
        "/tags/$(resourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tagKeys" => tagKeys), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_matching_workflow(input_source_config, output_source_config, resolution_techniques, role_arn, workflow_name)
    update_matching_workflow(input_source_config, output_source_config, resolution_techniques, role_arn, workflow_name, params::Dict{String,<:Any})

Updates an existing MatchingWorkflow. This method is identical to CreateMatchingWorkflow,
except it uses an HTTP PUT request instead of a POST request, and the MatchingWorkflow must
already exist for the method to succeed.

# Arguments
- `input_source_config`: A list of InputSource objects, which have the fields
  InputSourceARN and SchemaName.
- `output_source_config`: A list of OutputSource objects, each of which contains fields
  OutputS3Path, ApplyNormalization, and Output.
- `resolution_techniques`: An object which defines the resolutionType and the
  ruleBasedProperties
- `role_arn`: The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes
  this role to create resources on your behalf as part of workflow execution.
- `workflow_name`: The name of the workflow to be retrieved.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: A description of the workflow.
- `"incrementalRunConfig"`: An object which defines an incremental run type and has only
  incrementalRunType as a field.
"""
function update_matching_workflow(
    inputSourceConfig,
    outputSourceConfig,
    resolutionTechniques,
    roleArn,
    workflowName;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return entityresolution(
        "PUT",
        "/matchingworkflows/$(workflowName)",
        Dict{String,Any}(
            "inputSourceConfig" => inputSourceConfig,
            "outputSourceConfig" => outputSourceConfig,
            "resolutionTechniques" => resolutionTechniques,
            "roleArn" => roleArn,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_matching_workflow(
    inputSourceConfig,
    outputSourceConfig,
    resolutionTechniques,
    roleArn,
    workflowName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return entityresolution(
        "PUT",
        "/matchingworkflows/$(workflowName)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "inputSourceConfig" => inputSourceConfig,
                    "outputSourceConfig" => outputSourceConfig,
                    "resolutionTechniques" => resolutionTechniques,
                    "roleArn" => roleArn,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
